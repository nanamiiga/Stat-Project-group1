import numpy as np
import matplotlib.pyplot as plt
np.random.seed(1)

N_b = 10e5 # Number of background events, used in generation and in fit.
b_tau = 30. # Spoiler.

def generate_data(n_signals = 400):
    ''' 
    Generate a set of values for signal and background. Input arguement sets 
    the number of signal events, and can be varied (default to higgs-like at 
    announcement). 
    
    The background amplitude is fixed to 9e5 events, and is modelled as an exponential, 
    hard coded width. The signal is modelled as a gaussian on top (again, hard 
    coded width and mu).
    '''
    vals = []
    vals += generate_signal( n_signals, 125., 1.5)
    vals += generate_background( N_b, b_tau)
    return vals


def generate_signal(N, mu, sig):
    ''' 
    Generate N values according to a gaussian distribution.
    '''
    return np.random.normal(loc = mu, scale = sig, size = N).tolist()


def generate_background(N, tau):
    ''' 
    Generate N values according to an exp distribution.
    '''
    return np.random.exponential(scale = tau, size = int(N)).tolist()


def get_B_chi(vals, mass_range, nbins, A, lamb):
    ''' 
    Calculates the chi-square value of the no-signal hypothesis (i.e background
    only) for the passed values. Need an expectation - use the analyic form, 
    using the hard coded scale of the exp. That depends on the binning, so pass 
    in as argument. The mass range must also be set - otherwise, its ignored.
    '''
    bin_heights, bin_edges = np.histogram(vals, range = mass_range, bins = nbins)
    half_bin_width = 0.5*(bin_edges[1] - bin_edges[0])
    ys_expected = get_B_expectation(bin_edges + half_bin_width, A, lamb)
    chi = 0

    # Loop over bins - all of them for now. 
    for i in range( len(bin_heights) ):
        chi_nominator = (bin_heights[i] - ys_expected[i])**2
        chi_denominator = ys_expected[i]
        chi += chi_nominator / chi_denominator
    
    return chi/float(nbins-2) # B has 2 parameters.


def get_B_expectation(xs, A, lamb):
    ''' 
    Return a set of expectation values for the background distribution for the 
    passed in x values. 
    '''
    return [A*np.exp(-x/lamb) for x in xs]


def signal_gaus(x, mu, sig, signal_amp):
    return signal_amp/(np.sqrt(2.*np.pi)*sig)*np.exp(-np.power((x - mu)/sig, 2.)/2)


def get_SB_expectation(xs, A, lamb, mu, sig, signal_amp):
    ys = []
    for x in xs:
        ys.append(A*np.exp(-x/lamb) + signal_gaus(x, mu, sig, signal_amp))
    return ys

#%%
#Part 1 Generating Data
import matplotlib.pyplot as plt 
# Making plots. 
import numpy as np 
# Random number generation.
# Generate 1k random numbers from a uniform distribution. 
# The returned type is a numpy array, with length 1k.
vals = generate_data()
# Make a histogram.
bin_heights, bin_edges, patches = plt.hist(vals, range = [104, 155], bins = 30) 
#Adding the bin made the horizontal line narrower
plt.show()
# bin_heights and bin_edges are numpy arrays.
# patches are the matplotlib bar objects, which we wonâ€™t need.

#%%
#Part 2 Fitting Data
#Picked a, the likelihood method
lamb=sum(generate_background(N_b,b_tau))/N_b#from max likelihood method, lambda is the sum of y values divided by the number of data

print('lambda is',lamb)

#Finding an A that scales the function so that the area under the histogram and the fit curve are the same
A=[]
for i in range(50000,60000):
    if -1<=sum(get_B_expectation(bin_edges[0:10], i, lamb))-sum(bin_heights[0:10])<=1:#only selecting first half to only consider the backgrounf
        A.append(i)
A=np.mean(A)
print('A is', np.mean(A)) 


x=np.array(range(104,155))
y=A*np.exp(-x/lamb)
plt.plot(x,A*np.exp(-x/lamb))   
bin_heights, bin_edges, patches = plt.hist(vals, range = [104, 155], bins = 30) 
plt.show()

#%%
#Part 3 Goodness of Fit
#Only considering the background so the range is 104-120
print('chi^2 value is', get_B_chi(vals,[104,120],10,A,lamb))




    
    



